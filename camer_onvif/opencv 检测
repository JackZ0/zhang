#include "mainwindow.h"
#include "ui_mainwindow.h"

int minh,maxh,mins,maxs,minv,maxv;
MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);

    //Mat img = imread(":/new/label/img/4.jpg");
    Mat img = imread("F://qtpractise//pic//test1//img//9.png");
    QImage Img;
    Mat fhsv,special;
    cvtColor(img,fhsv,COLOR_BGR2HSV);   //将图像转换为HSV模型
    deal('L');
    inRange(fhsv,Scalar(minh,mins,minv),Scalar(maxh,maxs,maxv),special);
    imshow("A",special);

    Mat img1 = imread("F://qtpractise//pic//test1//img//2.png");
    QImage Img1;
    Mat fhsv1,special1;
    cvtColor(img1,fhsv1,COLOR_BGR2HSV);   //将图像转换为HSV模型
    deal('L');
    inRange(fhsv1,Scalar(minh,mins,minv),Scalar(maxh,maxs,maxv),special1);
    imshow("B",special1);

    double value = 0.0;
    value = getMSSIM(img, img1);
    qDebug() << value << endl;
   // imshow("origin",img);
}

MainWindow::~MainWindow()
{
    delete ui;
}


void MainWindow::helptext(){
    cout << "B——黑色\n";
       cout << "H——灰色\n";
       cout << "W——白色\n";
       cout << "R——红色\n";
       cout << "O——橙色\n";
       cout << "Y——黄色\n";
       cout << "G——绿色\n";
       cout << "L——蓝色\n";
       cout << "P——紫色\n";
       cout << "输入要求识别的颜色对应的字母:" ;
}

void MainWindow::deal(char color)
{

        switch(color){
    case 'B':
        minh = 0;
        maxh = 180;
        mins = 0;
        maxs = 255;
        minv = 0;
        maxv = 46;
        break;
    case 'H':
        minh = 0;
        maxh = 180;
        mins = 0;
        maxs = 43;
        minv = 46;
        maxv = 220;
        break;
    case 'W':
        minh = 0;
        maxh = 180;
        mins = 0;
        maxs = 30;
        minv = 221;
        maxv = 255;
        break;

    case 'R':
        minh = 0;
        maxh = 10;
        mins = 43;
        maxs = 255;
        minv = 46;
        maxv = 255;
        break;

    case 'O':
        minh = 11;
        maxh = 25;
        mins = 43;
        maxs = 255;
        minv = 46;
        maxv = 255;
        break;
    case 'Y':
        minh = 26;
        maxh = 25;
        mins = 43;
        maxs = 255;
        minv = 46;
        maxv = 255;
        break;

    case 'G':
        minh = 35;
        maxh = 77;
        mins = 43;
        maxs = 255;
        minv = 46;
        maxv = 255;
        break;
    case 'L':
        minh = 100;
        maxh = 124;
        mins = 43;
        maxs = 255;
        minv = 46;
        maxv = 255;
        break;

    case 'P':
        minh = 125;
        maxh = 155;
        mins = 43;
        maxs = 255;
        minv = 46;
        maxv = 255;
        break;
    default:
        cout << "输入错误" << endl;
        exit(0);
    }
}
//SSIM指数
//https://blog.csdn.net/ecnu18918079120/article/details/60149864
double MainWindow::getMSSIM(const Mat& i1, const Mat& i2)
{
    const double C1 = 6.5025, C2 = 58.5225;
    /***************************** INITS **********************************/
    int d = CV_32F;

    Mat I1, I2;
    i1.convertTo(I1, d);           // cannot calculate on one byte large values
    i2.convertTo(I2, d);

    Mat I2_2 = I2.mul(I2);        // I2^2
    Mat I1_2 = I1.mul(I1);        // I1^2
    Mat I1_I2 = I1.mul(I2);        // I1 * I2

    /*************************** END INITS **********************************/

    Mat mu1, mu2;   // PRELIMINARY COMPUTING
    GaussianBlur(I1, mu1, Size(11, 11), 1.5);
    GaussianBlur(I2, mu2, Size(11, 11), 1.5);

    Mat mu1_2 = mu1.mul(mu1);
    Mat mu2_2 = mu2.mul(mu2);
    Mat mu1_mu2 = mu1.mul(mu2);

    Mat sigma1_2, sigma2_2, sigma12;

    GaussianBlur(I1_2, sigma1_2, Size(11, 11), 1.5);
    sigma1_2 -= mu1_2;

    GaussianBlur(I2_2, sigma2_2, Size(11, 11), 1.5);
    sigma2_2 -= mu2_2;

    GaussianBlur(I1_I2, sigma12, Size(11, 11), 1.5);
    sigma12 -= mu1_mu2;

    ///////////////////////////////// FORMULA ////////////////////////////////
    Mat t1, t2, t3;

    t1 = 2 * mu1_mu2 + C1;
    t2 = 2 * sigma12 + C2;
    t3 = t1.mul(t2);              // t3 = ((2*mu1_mu2 + C1).*(2*sigma12 + C2))

    t1 = mu1_2 + mu2_2 + C1;
    t2 = sigma1_2 + sigma2_2 + C2;
    t1 = t1.mul(t2);               // t1 =((mu1_2 + mu2_2 + C1).*(sigma1_2 + sigma2_2 + C2))

    Mat ssim_map;
    divide(t3, t1, ssim_map);      // ssim_map =  t3./t1;

    Scalar mssim = mean(ssim_map); // mssim = average of ssim map
    return (mssim[0] + mssim[1] + mssim[2])/3;
}


//平均哈希算法
int MainWindow::aHash(Mat matSrc1, Mat matSrc2)
{
    Mat matDst1, matDst2;
    cv::resize(matSrc1, matDst1, cv::Size(8, 8), 0, 0, cv::INTER_CUBIC);
    cv::resize(matSrc2, matDst2, cv::Size(8, 8), 0, 0, cv::INTER_CUBIC);

    cv::cvtColor(matDst1, matDst1, CV_BGR2GRAY);
    cv::cvtColor(matDst2, matDst2, CV_BGR2GRAY);

    int iAvg1 = 0, iAvg2 = 0;
    int arr1[64], arr2[64];

    for (int i = 0; i < 8; i++)
    {
        uchar* data1 = matDst1.ptr<uchar>(i);
        uchar* data2 = matDst2.ptr<uchar>(i);
        int tmp = i * 8;
        for (int j = 0; j < 8; j++)
        {
            int tmp1 = tmp + j;
            arr1[tmp1] = data1[j] / 4 * 4;
            arr2[tmp1] = data2[j] / 4 * 4;
            iAvg1 += arr1[tmp1];
            iAvg2 += arr2[tmp1];
        }
    }
    iAvg1 /= 64;
    iAvg2 /= 64;
    for (int i = 0; i < 64; i++)
    {
        arr1[i] = (arr1[i] >= iAvg1) ? 1 : 0;
        arr2[i] = (arr2[i] >= iAvg2) ? 1 : 0;
    }
    int iDiffNum = 0;
    for (int i = 0; i < 64; i++)
        if (arr1[i] != arr2[i])
            ++iDiffNum;
    return iDiffNum;
}
